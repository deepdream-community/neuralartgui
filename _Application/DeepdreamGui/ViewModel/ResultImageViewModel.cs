using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using DeepdreamGui.Model;
using Microsoft.Win32;

namespace DeepdreamGui.ViewModel
{
    /// <summary>
    /// Class for a view model of the result images
    /// Derivative by ParameterViewModel
    /// </summary>
    public class ResultImageViewModel : ParameterViewModel { 
        private double progress;
        private BitmapImage image;
        private bool done = false;
        private bool loading = true;
        private RelayCommand saveImageCommand;
        private RelayCommand deleteImageCommand;

        private readonly Action<ResultImageViewModel> deleteMe;
        private readonly Action<ResultImageViewModel> openDetailsWindow;
        private readonly Action<string> basePropertyChanged;
        private RelayCommand detailsImageCommand;
        private string description;
        private string name;
        private BitmapImage originalImage;
        private BitmapImage styleImage;
        private bool selected;
        

        /// <summary>
        /// Constructor of the result image view model.
        /// </summary>
        /// <param name="deleteMe">Action that will be invoked if the result image should be deleted. Default value is null.</param>
        /// <param name="openDetailsWindow">Action that will be invoked if the details window for the result image should be displayed. Default value is null.</param>
        /// <param name="propertyChanged">Action that will be invoked if a property of the result image changes. Default value is null.</param>
        public ResultImageViewModel(Action<ResultImageViewModel> deleteMe = null, Action<ResultImageViewModel> openDetailsWindow = null, Action<string> propertyChanged = null)
        {
            this.deleteMe = deleteMe;
            this.openDetailsWindow = openDetailsWindow;
            this.basePropertyChanged = propertyChanged;
        }
        
        /// <summary>
        /// Property displaying if the image is currently loading.
        /// </summary>
        public bool Loading
        {
            get { return loading; }
            set { loading = value; OnPropertyChanged();}
        }
        
        /// <summary>
        /// Property displaying the name of an image.
        /// </summary>
        public string Name
        {
            get { return name; }
            set { name = value; OnPropertyChanged(); }
        }
        
        /// <summary>
        /// Property displaying if the result image is generated by deep dream.
        /// </summary>
        public bool DreamMode => Mode == Modes.Dream;
        
        /// <summary>
        /// Property displaying if the result image is generated by deep style.
        /// </summary>
        public bool StyleMode => Mode == Modes.Style;
        
        /// <summary>
        /// Property displaying the mode with which the result image was generated.
        /// </summary>
        public Modes Mode { get; set; }
        
        /// <summary>
        /// Property displaying the mode with which the result image was generated as a string.
        /// </summary>
        public string ModeName => Enum.GetName(typeof(Modes), Mode);
        
        /// <summary>
        /// Property displaying the id of the result image.
        /// </summary>
        public string SeriesId { get; set; }
        
        /// <summary>
        /// Property displaying the number iteration step in which the result image was generated.
        /// </summary>
        public int Iteration { get; set; }
        
        /// <summary>
        /// Property displaying the intensity with which the result image was generated.
        /// </summary>
        public double Intensity { get; set; }
        
        /// <summary>
        /// Property displaying the octave value with which the result image was generated.
        /// </summary>
        public int Octave { get; set; }
        
        /// <summary>
        /// Subjective Variation of result image. Gets written to reports. 
        /// </summary>
        public int SubjectiveVariation { get; set; } = 1;    
        
        /// <summary>
        /// Property displaying a description for the result image
        /// </summary>
        public string Description
        {
            get { return description; }
            set { description = value; OnPropertyChanged();}
        }
        
        /// <summary>
        /// Property displaying the current progress in generating the result image.
        /// </summary>
        public double Progress
        {
            get { return progress; }
            set { progress = value; OnPropertyChanged(); OnPropertyChanged(nameof(IsIndeterminate)); }
        }
        
        /// <summary>
        /// Property displaying if the progress will be shown as indeterminate.
        /// </summary>
        public bool IsIndeterminate => Progress <= 0;
        
        /// <summary>
        /// Property displaying the result image as Bitmap image
        /// </summary>
        public BitmapImage Image
        {
            get { return image; }
            set { image = value; OnPropertyChanged(); OnPropertyChanged(nameof(ImageSource));}
        }
        
        /// <summary>
        /// Property displaying the original image from which the result image was generated.
        /// </summary>
        public BitmapImage OriginalImage
        {
            get { return originalImage; }
            set { originalImage = value; OnPropertyChanged(); OnPropertyChanged(nameof(OriginalImageSource)); }
        }
        
        /// <summary>
        /// Property displaying the style image from which the result image was generated.
        /// </summary>
        public BitmapImage StyleImage
        {
            get { return styleImage; }
            set { styleImage = value; OnPropertyChanged(); OnPropertyChanged(nameof(StyleImageSource)); }
        }
        
        /// <summary>
        /// Property displaying, that the result image was generated.
        /// </summary>
        public bool Done
        {
            get { return done; }
            set { done = value; OnPropertyChanged();}
        }
        
        /// <summary>
        /// Property displaying if the images was shrink during the generation.
        /// </summary>
        public bool Shrinked { get; set; }
        
        /// <summary>
        /// Property displaying if the result image is selected.
        /// </summary>
        public bool Selected
        {
            get { return selected; }
            set { if(Done) selected = value;  OnPropertyChanged(); basePropertyChanged?.Invoke("ButtonGroupVisible"); }
        }
        
        /// <summary>
        /// Async function which will be invoked if there is an event happing in the main view and this instance of result image is involved.
        /// Handel the event arguments
        /// </summary>
        /// <param name="deepDreamEventArgs">Arguments of the event</param>
        public async void ProcessEventHandlerAsync(DeepDreamEventArgs deepDreamEventArgs)
        {
            switch (deepDreamEventArgs.Event)
            {
                case DeepDreamEvents.TotalProgress: 
                    break;
                case DeepDreamEvents.ProcessStarted:
                    break;
                case DeepDreamEvents.Progress:
                    //If there is a progress update, the result image progress will be updated
                    double value;
                    if (Double.TryParse(deepDreamEventArgs.Status, NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out value))
                        this.Progress = value;
                    break;
                case DeepDreamEvents.StepStarted:
                    break;
                case DeepDreamEvents.StepComplete:
                    break;
                case DeepDreamEvents.AllComplete:
                    break;
                case DeepDreamEvents.SavedImage:
                    //If there is a result image saved by the process, load it
                    Image = await ImageModel.LoadImageAsync(deepDreamEventArgs.Status, true);
                    Loading = false;
                    Done = true;
                    break;
                case DeepDreamEvents.Error:
                    break;
                case DeepDreamEvents.ProcessDone:
                    break;
                default:
                    break;
            }
        }
        
        /// <summary>
        /// Async function to save the result image.
        /// Command Handler
        /// </summary>
        /// <param name="o">The calling object</param>
        private async void SaveImageAsync(object o)
        {
            await SaveImageAsync(o, String.Empty);
        }
        
        /// <summary>
        /// Async function to save the result iamge.
        /// </summary>
        /// <param name="o">Object from where the save was called, empty.</param>
        /// <param name="directoryName">Directory, where the picture should be saved.</param>
        /// <returns>Task void</returns>
        public async Task SaveImageAsync(object o, string directoryName)
        {
            //Build the file name
            var extension = Mode == Modes.Dream ? $"_{SelectedModelParameter.Name.Replace(" ","")}" : "" ;
            extension += $"_{Iteration}";

            string userFileName = "";
            if (String.IsNullOrEmpty(directoryName))
            {
                //If there is no directory passed, ask the user where to save the image
                var saveFileDialog = new SaveFileDialog
                {
                    Filter = "JPEG Image (*.jpg)|*.jpg",
                    FileName = this.Name,

                };

                if (saveFileDialog.ShowDialog() != true) return;
                userFileName = Path.GetFileNameWithoutExtension(saveFileDialog.FileName);
                directoryName = Path.GetDirectoryName(saveFileDialog.FileName);
            }
            else
            {
                userFileName = this.Name;
            }
            //Save the image
            userFileName += extension + ".jpg";
            var path = Path.Combine(directoryName, userFileName);
            await ImageModel.SaveImage(this.Image, path);
        }
        
        /// <summary>
        /// Property displaying the save image command
        /// </summary>
        public ICommand SaveImageCommand
        {
            get
            {
                return saveImageCommand ??
                       (saveImageCommand =
                           new RelayCommand(SaveImageAsync, param => Done && Image != null));
            }
        }

        /// <summary>
        /// Async function to delete the current result image
        /// Command Handler
        /// </summary>
        /// <param name="o">empty</param>
        private async void DeleteImageAsync(object o)
        {
            this.Selected = false;
            await Task.Factory.StartNew(() =>
            {
                //Invoke the passed delete method
                deleteMe?.Invoke(this);
            });
        }
        
        /// <summary>
        /// Property displaying the delete image command.
        /// </summary>
        public ICommand DeleteImageCommand { 
            get
            {
                return deleteImageCommand ??
                       (deleteImageCommand =
                           new RelayCommand(DeleteImageAsync, param => Done && Image != null && deleteMe != null));
            }
        }

        /// <summary>
        /// Function to show the details of the result image.
        /// Command Handler
        /// </summary>
        /// <param name="o">empty</param>
        private void DetailsImage(Object o)
        {
            //Invoke the passed open details window method
            openDetailsWindow?.Invoke(this);
        }
        
        /// <summary>
        /// Property displaying the show details command of the result image.
        /// </summary>
        public ICommand DetailsImageCommand
        {
            get
            {
                return detailsImageCommand ??
                       (detailsImageCommand =
                           new RelayCommand(DetailsImage, param => Done && Image != null && openDetailsWindow != null));
            }
        }
        
        /// <summary>
        /// Property displaying the (result)image as an ImageSource.
        /// </summary>
        public ImageSource ImageSource => image;
        
        /// <summary>
        /// Property displaying the original image as an ImageSource.
        /// </summary>
        public ImageSource OriginalImageSource => originalImage;
        
        /// <summary>
        /// Property dispaying the style iamge as an ImageSource
        /// </summary>
        public ImageSource StyleImageSource => styleImage;
    }
}
